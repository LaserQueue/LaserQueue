Sam, you know how to format things. All I'll do is put docs here.


comm protocols

Sending to server

Format:
{
	"action": action to perform
	"args": list of arguments
}

actions:
Note: only listing recommended actions. using the undocumented actions might result in problems with multiple people using the software at once.


add
arguments: name, priority, estimated time, material code

adds the specified name, priority, etc to the list.


upass
arguments: uuid

moves the specified job below the next job.


uremove
arguments: uuid

removes the specified job from the list.


umove *
arguments: uuid, target index, target priority

moves the specified job to the target index, and the target priority.


uincrement *
arguments: uuid

moves the specified job up one job, or if it's at the top of its priority level, up one priority.


udecrement *
arguments: uuid

moves the specified job down one job, or if it's at the bottom of its priority level, down one priority.


auth
arguments: password

the auth action is completely insecure. It's meant for enough authentication that the admins don't need to constantly watch the users. This will be fixed when logins are fully implemented. The password is currently plaintext, but eventually will be hashed. 
requests an authentication packet from the server. if recieved, you'll be put into admin mode.


null
arguments: N/A

nothing


uuddlrlrba
arguments: N/A

huehuehue


*: applies the Modified gear.


Sending to client:

the action tag defines the data sent.


display
{
	"action": "display"
	"currtime": current time of operation. leave as -1 if you don't want it to render.      ### NYI ###
	"esttime": estimated time of the operation. leave as -1 if you don't want it to render. ### NYI ###
	"queue": the queue object.
}

notification ### NYI ###
{
	"action": "notification"
	"title": the title of the modal error.
	"content": the text displayed in the modal.
}

auth
{
	"action": "auth"
}
