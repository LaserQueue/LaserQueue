// put any utilities and functions etc in here


// logs text to devlog on page
function logText(text) {
	if(devLog) {
		var currentTime = new Date();
		var currentHours = currentTime.getHours();
		var currentMinutes = currentTime.getMinutes();
		var currentSeconds = currentTime.getSeconds();
		var currentMillis = currentTime.getMilliseconds();

		var hoursZero = (currentHours < 10 ? '0' : '');
		var minutesZero = (currentMinutes < 10 ? '0' : '');
		var secondsZero = (currentSeconds < 10 ? '0' : '');
		var millisZero = (currentMillis < 10 ? '00' : currentMillis < 100 ? '0' : '');
		var timestamp = '[' + hoursZero + currentHours + ':' + minutesZero + currentMinutes + ':' + secondsZero + currentSeconds + '.' + millisZero + currentMillis + ']';

		var textArray = text.split('\n');

		for (var i = textArray.length - 1; i >= 0; i--) {
			$('.log-pre').prepend('<span class="log-time"> ' + timestamp + ':</span> ' + textArray[i] + '\n');
		}
	}
}

// repopulate action button UUIDs
function populateActions() {
	logText('Populating actions');

	$('.cutting-table-template tr').each(function(index, el) {
		$(el).attr('data-uuid', allCuts[index].uuid);
		$(el).attr('data-pos', index);
		$(el).unbind('click');
	});

	// reinitialize bootstrap tooltips
	if(isTouchDevice() == false) {
		$('[data-toggle="tooltip"]').tooltip();
	}

	// handler to remove a job
	$('.remove-job').click(function() {
		googleAnalytics('send', 'event', 'action', 'click', 'remove job');
		logText('removing item ' + $($(this).parents()[1]).attr('data-uuid'));
		socketSend({
			'action': 'remove',
			'args': [$($(this).parents()[1]).attr('data-uuid')]
		});
	});

	// handler to lower a job
	$('.lower-priority').click(function() {
		googleAnalytics('send', 'event', 'action', 'click', 'pass job');
		logText('passing item ' + $($(this).parents()[1]).attr('data-uuid'));
		socketSend({
			'action': 'pass',
			'args': [$($(this).parents()[1]).attr('data-uuid')]
		});
	});

	// handler to decrement a job
	$('.decrement-job').click(function() {
		googleAnalytics('send', 'event', 'action', 'click', 'decrement job');
		logText('removing item ' + $($(this).parents()[1]).attr('data-uuid'));
		socketSend({
			'action': 'decrement',
			'args': [$($(this).parents()[1]).attr('data-uuid')]
		});
	});

	// handler to increment a job
	$('.increment-job').click(function() {
		googleAnalytics('send', 'event', 'action', 'click', 'increment job');
		logText('passing item ' + $($(this).parents()[1]).attr('data-uuid'));
		socketSend({
			'action': 'increment',
			'args': [$($(this).parents()[1]).attr('data-uuid')]
		});
	});
}

// displays message in a bootstrap modal
function modalMessage(modalTitle, modalBody) {
	$('.notify-modal-title').html(modalTitle);
	$('.notify-modal-body').html(modalBody);
	$('#notify-modal').modal();
}

// reset a form with thanks to http://stackoverflow.com/questions/680241/resetting-a-multi-stage-form-with-jquery
function resetForm(form) {
	form.find('input:text, input:password, input[type=number], input:file, textarea').val(''); // removed 'select'
	form.find('input:radio, input:checkbox').removeAttr('checked').removeAttr('selected');
	if($(form).selector == '.new-cut-form') {
		form.find('.selected').prop('selected', true);
	}
}

// adds SID to JSON and sends over websockets if the connection is stable
function socketSend(jdata) {
	// if a session ID has been set and the socket is ready
	if(typeof SID != "undefined" && socket.readyState == 1) {
		jdata.sid = SID;
		socket.send(JSON.stringify(jdata));
	} else {
		// if not sending, log why
		if(typeof SID != "undefined") {
			logText("socketSend() has been called, but SID is undefined.");
		}
		if(socket.readyState != 1) {
			logText("socketSend() has been called, but socket.readyState is not 1. The socket is probably not connected yet.");
		}
	}
}

// wrapper for socketSend that changes an item's attribute
function changeAttr(taskid, attrKey, attrVal) {
	if(typeof taskid == 'string') {
		socketSend({
			'action': 'attr',
			'args': [taskid, attrKey, attrVal]
		});
	} else if(typeof taskid == 'number') {
		changeAttr(allCuts[taskid].uuid, attrKey, attrVal);
	} else if(typeof taskid == 'object') {
		changeAttr($(taskid).attr('data-uuid'), attrKey, attrVal);
	} else {
		logText('changeAttr() called with invalid taskid type');
	}
}

// read the function name, it says it all
function rickRoll() {
	if (easterEggs) {
		modalMessage('Never gonna give you up', '<iframe width="420" height="315" src="http://www.youtube.com/embed/dQw4w9WgXcQ?autoplay=1&disablekb=1&controls=0&loop=1&showinfo=0&iv_load_policy=3" frameborder="0" allowfullscreen></iframe>');
		$('html').addClass('lol');
	}
	else {
		logText('This is a serious establishment, son. I\'m dissapointed in you.');
	}
}

// checks if the device is a touch device
function isTouchDevice(){
	return true == ('ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch);
}

// ga() if Google Analytics is enabled
function googleAnalytics(i, s, o, g, r, a, m){
	if (config.google_analytics_key != '') {
		ga(i, s, o, g, r, a, m);
	}
}

// gets the config file and parses values

// declare almost all globals here
var getConfigFile, config, host, jsonData, socket, materials, priorities,  refreshRate, reconnectRate, easterEggs, SID, buttons,
    authed = false,
    allCuts = [],
    displayEl = {},
    renderDirectives = {
		priority: {
			html: function(params) {
				return this.priority + (
					this.coachmodified ? 
						' <span class="glyphicon glyphicon-cog coach-modified" data-toggle="tooltip" data-placement="bottom" title="' + config.modified_hover + '"></span>'
						: ''
				);
			},
		},
		actions: {
			html: function(params) {
				var data = '';
				for (var i = 0; i < Object.keys(buttons).length; i++) {
					var button = Object.keys(buttons)[i];
					if (config.authactions.indexOf(button) == -1 || authed) {
						if (button != "pass" || !(params.index >= config.pass_depth && config.pass_depth || authed)) {
							data += buttons[button];
						}
					}
				}
				return data;
			},
		}
	},
	draggable = [];

// generate a session ID
SID = uuid.v1();
window.console.log('SID: ' + SID);

// fetches config file from server
getConfigFile = $.getJSON('/config.json', function() {

	// config.thing returns thing in the config file
	config = getConfigFile.responseJSON;

	// hide and disable log if not enabled
	devLog = config.dev_log;
	if(devLog != true) { $('[for=log-checkbox]').slideUp(); }
	logText('Log starts here');

	// log entire config file
	logText('Config file follows: ' + JSON.stringify(config, null, 2));

	// set host from host and port
	host = 'ws://' + config.host + ':' + config.port;

	// set materials and priorities in the same way
	materials = config.materials;
	priorities = config.priorities;

	// set refreshRate and reconnectRate
	refreshRate = config.refreshRate;
	reconnectRate = config.reconnectRate;

	easterEggs = config.easter_eggs;

	// render the materials dropdown
	if (config.default_material == "") {
		$('#cut-material').append('
			<option disabled selected value="N/A" class="selected">' + config.material_input + '</option>
		');
	}
	
	for(var m in materials) {
		var selected = (m === config.default_material ? 'selected' : '');
		$('#cut-material').append('
			<option ' + selected + ' value="' + m + '" class="'+selected+'">' + materials[m] + '</option>
		');
	}

	// render the priorities dropdown
	if (config.priority_choose) {
		$('#priority-dropdown').append('
			<option disabled selected value="-1" class="selected">' + config.priority_input + '</option>
		');
	}
	for(var p in priorities) {
		var disabled = (p < config.default_priority && !config.priority_selection ? 'disabled ' : '');
		var selected = (p == config.default_priority && !config.priority_choose ? 'selected' : '');
		$('#priority-dropdown').append('
			<option ' + selected + ' value="' + String(priorities.length-p-1) + '"  class="'+ disabled + selected + '">' + priorities[p] + '</option>
		');
	}

	if (!config.priority_selection) {
		$('.disabled').prop('disabled', true);
	}

	$('.cut-human-name').attr('placeholder', config.name_input);
	$('.cut-time-estimate').attr('placeholder', config.time_input);
	$('.cut-human-name').attr('title', config.name_hover);
	$('.cut-time-estimate').attr('title', config.time_hover);
	$('.cut-material').attr('title', config.material_hover);
	$('.priority-dropdown').attr('title', config.priority_hover);

	$('.action-header').text(config.action_header);
	$('.name-header').text(config.name_header);
	$('.material-header').text(config.material_header);
	$('.time-header').text(config.time_header);
	$('.priority-header').text(config.priority_header);



  buttons = {
  	'remove': '\n<a role="button" tabindex="0" class="glyphicon glyphicon-remove remove-job" data-toggle="tooltip" data-placement="right" title="' + config.remove_hover + '"></a>',
  	'increment': '\n<a role="button" tabindex="0" class="glyphicon glyphicon-chevron-up increment-job" data-toggle="tooltip" data-placement="right" title="' + config.incr_hover + '"></a>',
  	'decrement': '\n<a role="button" tabindex="0" class="glyphicon glyphicon-chevron-down decrement-job" data-toggle="tooltip" data-placement="right" title="' + config.decr_hover + '"></a>',
  	'pass': '\n<a role="button" tabindex="0" class="glyphicon glyphicon-triangle-bottom lower-priority" data-toggle="tooltip" data-placement="right" title="' + config.pass_hover + '"></a>'
  };

	if (config.admin_mode_enabled) {
		$('.authorize').click(function() {
			if (authed) {
				socketSend({'action': 'deauth'});
				$('.authorize').tooltip('hide');
			}
			else {
				modalMessage('Authenticate', '
					<form class="login-form">
						<div class="form-group">
							<label for="password">Password</label>
							<input type="password" class="form-control coach-password" id="password" placeholder="Password">
						</div>
						<button type="submit" class="btn btn-default">Sign in</button>
					</form>
				');
				$('.authorize').tooltip('hide');

				setTimeout('
					$(".coach-password").focus();
				',500);

				

				$('.login-form').submit(function(event) {
					event.preventDefault();
					if($('#password').val() != '') {
						logText('Password entered. Attempting auth.');
						socketSend({
							'action': 'auth',
							'args': [sha1($('#password').val())]
						});
						
					}
				});
			}
		});
		$('.authorize').attr('data-original-title', config.login);
	};

	if(config.google_analytics_key == '') {
		logText('Google Analytics tracking is not enabled.');
	} else {
		logText('Google Analytics tracking is enabled with key ' + config.google_analytics_key);

		(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
		(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
		m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
		})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

		googleAnalytics('create', config.google_analytics_key, {
			'cookieDomain': 'none'
		});

		googleAnalytics('send', 'pageview');
	}

	logText('LaserCutter software is up. Attempting connection to WebSockets host ' + host);
	socketSetup();
	setInterval(function() {
		if(typeof reconnectRate != 'undefined' && (typeof socket == 'undefined' || socket.readyState == socket.CLOSED)) {
			// initialize websockets if closed
			logText('Attempting connection to WebSockets host', host);
			socketSetup();
		}
	}, reconnectRate);

});
// initialize the things

window.console.log('This silly browser log is generally not used. Click the console button at the bottom of the page instead! If there are errors here, please raise an issue.');

// holds old and new JSON
// for comparison to minimize layout thrashing n stuff
var oldJsonData = 'uninitialized';
var jsonData;

// initialize the modal by changing the title
$('.notify-modal-title').html('Notification');

// footer
$.ajax({
	url: '/infotext.md',
	type: 'GET'
})
.done(function(request) {
	$('.credits-footer').before(
		marked(request)
	);
})
.fail(function() {
	console.log('Failed to get infotext.md');
});

// focus the first form element on not-mobile
if(!isTouchDevice()) {
	$('.cut-human-name').focus();
}
// a function to set up WebSockets

function socketSetup() { // god help me

	// wait until host has a real value
	while(host == 'undefined') {}
	socket = new WebSocket(host);

	// when websockets connects
	socket.onopen = function() {
		// print to log and consoles
		logText('WebSockets connection opened successfully');

		$('#notify-modal').modal('hide');

		// poll for new data and repeat every refreshRate
		socketSend({'action': 'null'});
		setInterval(function () {
			if(socket.readyState != socket.CONNECTING) {
				socketSend({'action': 'null'});
			}
		},refreshRate);
	};

	// when websockets message
	socket.onmessage = function(msg) {

		// loads JSON data
		jsonData = JSON.parse(msg.data);

		// if data is new
		if(JSON.stringify(jsonData) !== JSON.stringify(oldJsonData)) {
		
			// deep copy jsonData to oldJsonData
			oldJsonData = $.extend({}, jsonData);
			
			// log the new data
			logText('new JSON received: ' + JSON.stringify(jsonData));

			// if being told to render table
			if(jsonData.action == 'display') {

				// reinitialize full list of cuts
				allCuts = [];

				if (config.admin_mode_enabled) {
					if (jsonData.auths.indexOf(SID.substring(0, 18)) < 0 && authed) {
						onDeauth();
					}
					else if (jsonData.auths.indexOf(SID.substring(0, 18)) >= 0 && !authed) {
						onAuth();
					}
					else if (jsonData.deauths.indexOf(SID.substring(0, 18)) >= 0 && !authed) {
						onFailedauth();
					}
				}
				// for each priority in list
				$(jsonData.queue).each(function(index, el) {

					// for each cut in priority
					$(el).each(function(arrayIndex, arrayEl) {
						// at this point nothing is human-readable
						// make material human-readable
						displayEl = $.extend({}, arrayEl); // deepcopy
						displayEl.material = materials[arrayEl.material];
						displayEl.priority = priorities[arrayEl.priority];
						var timetotal = arrayEl.esttime;
						var hours = Math.floor(timetotal/60);
						timetotal -= hours*60;
						var minutes = Math.floor(timetotal);
						timetotal -= minutes;
						var seconds = +(timetotal*60).toFixed(2);

						var output = String(hours ? hours+'h' : '') + (minutes && hours ? ' ' : '');
						output += String(minutes ? minutes+'m' : '') + (seconds && minutes ? ' ' : '');
						output += String(seconds ? seconds+'s' : '')

						displayEl.esttime = output;
						// add to full list of cuts
						allCuts = allCuts.concat(displayEl);
					});

				});
				
				// render allCuts into table
				$('.cutting-table-template').render(allCuts, renderDirectives);
				populateActions();

				// make items draggable anywhere if authed
				if(authed) {
					$('.cutting-table-template tr').each(function(index, el) {
						draggable[index] = this;
						$(this).draggabilly({
							axis: 'y',
							container: $('.cutting-table-template')//,
							// grid: [ 37, 37 ]
						});
						$(this).on('dragEnd', function(event, pointer) {
							socketSend({
								'action': 'relmove',
								'args': [
									$(this).attr('data-uuid'),
									+$(this).attr('data-pos') + +Math.round($(this).data('draggabilly').position.y / 37)
								]
							});
						});
					});
				}
			}

		} else if(jsonData.action == 'rickroll') {
			rickRoll();
		} else if(jsonData.action == 'refresh' && config.allow_force_refresh) {
			window.location.reload();
		}
	};

	// when websockets error
	socket.onerror = function(error) {
		// go tell a nerd
		modalMessage('Error 4', 'Could not connect to socket at ' + host + '. Maybe the backend is not running? This page will try to reconnect every few seconds. <br><br> <button class="btn btn-default btn-pink btn-retry">Retry</button>');

		// set up retry button
		$('.btn-retry').click(function() {
			window.location = window.location.origin + '?foo=' + Math.floor(Math.random()*11000);
		});
	};
};


function onAuth() {
	authed = true;
	logText('Displaying authed modal.');
	modalMessage('Success!', '<p class="lead">You\'ve been authorized!</p>');
	setTimeout('
		$("#notify-modal").modal("hide");
	', 1000);
	$('.cutting-table-template').render(allCuts, renderDirectives);
	$('.disabled').prop('disabled', false);
	$('.authorize').attr('data-original-title', config.logout);
	$('.nuvu-logo').attr('src', '/img/admin-logo.svg');
}

function onFailedauth() {
	modalMessage('Failure', '<p class="lead">Unfortunately, it looks like your password was wrong.</p>');
	logText('Password was wrong. Added to deauths. Shame activated. You\'re bad and you should feel bad.');
	socketSend({'action':'shame'});
}

function onDeauth() {
	authed = false;
	logText('User has been deauthed.');
	$('.cutting-table-template').render(allCuts, renderDirectives);
	$('.disabled').prop('disabled', true);
	$('.authorize').attr('data-original-title', config.login);
	$('.nuvu-logo').attr('src', '/img/logo.svg');
	$(draggable).draggabilly('disable');
}
// main program

// when jquery is here
$(document).ready(function() {

	// when submit button clicked
	$('.btn-submit').click(function(clickAction) {
		clickAction.preventDefault();
		logText("submit button clicked");
		var estimate = $('.cut-time-estimate').val().match(/\d*(\.\d+)?/);
		socketSend({
				'action': 'add',
				'args': [
					$('.cut-human-name').val(), 
					+$('.priority-dropdown').val(), 
					+estimate[0], 
					$('.cut-material').val()
				]
			});
		resetForm($('.new-cut-form'));
		$('.cut-human-name').focus();
		
	});

	var easterEgg = new Konami();
	easterEgg.code = function() {
		rickRoll();
	};
	easterEgg.load();

	// or this:
	// easter_egg.load('https://www.youtube.com/watch?v=dQw4w9WgXcQ');

});
//# sourceMappingURL=scripts.min.js.map